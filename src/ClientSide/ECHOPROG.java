import com.distinct.rpc.*;
import java.io.IOException;
import java.net.InetAddress;

/**
 * This class was automatically generated by Jrpcgen from the RPC/XDR file "stdin". <br>
 * It defines the client interface to a server implementing the "ECHOPROG" interface.
 */
public class ECHOPROG extends JRPCClient {

    /** Program ID of the interface. */
    public static final int ECHOPROG = 77;

    /**
     * Creates and connects an RPC client to a server that implements the "ECHOPROG" interface.
     * Calls the remote portmapper to look up the port of the server.
     * @param host       The host on which the server is running.
     * @param stream     Set to true for a TCP connection or false for UDP.
     * @exception        RPCError Thrown if the call fails for any reason.
     */
    public ECHOPROG(InetAddress host, boolean stream) throws RPCError {
        super(host, ECHOPROG, ECHOVERS, stream);
    }

    /**
     * Creates and connects an RPC client to a server that implements the "ECHOPROG" interface.
     * The client is connected to the known server port without any interaction with the portmapper.
     * @param host       The host on which the server is running.
     * @param port       The port on which the server is listening.
     * @param stream     Set to true for a TCP connection or false for UDP.
     * @exception        RPCError Thrown if the call fails for any reason.
     */

    public ECHOPROG(InetAddress host, int port, boolean stream) throws RPCError {
        super(host, ECHOPROG, ECHOVERS, port, stream);
    }

    /**
     * Creates an RPC client for a server that implements the "ECHOPROG" interface.
     * The client is initialized with the specified protocol client.
     * @param protocol   The protocol object that implements the client connection.
     */

    public ECHOPROG(ClientGeneric protocol) {
        super(protocol);
    }

    /** Version ID of the interface. */
    public static final int ECHOVERS = 1;

    public static final int login = 1;

    /**
     * Stub method that invokes the server function "login" (version 1).
     * @param arg1          input parameter of the remote call.
     * @param arg2          input parameter of the remote call.
     * @return           The return value of the remote call.
     * @exception        java.io.IOException Thrown if the call fails because the socket connection fails.
     * @exception        RPCError Thrown if the call fails for any other reason.
     */
    public String login_1(String arg1, String arg2) throws RPCError, IOException {
        login_1_argument arg = new login_1_argument();
        arg.arg1 = arg1;
        arg.arg2 = arg2;

        XDRstring retval = new XDRstring();
        GetClient().Call(login, arg, retval);

        return retval.value;
    }
}
